{"version":3,"sources":["fetchMovies.js","markup.js","localStorige.js","index.js"],"names":["refs","moviesListEl","document","querySelector","homePageEl","libraryPageEl","headerEl","libraryButtonsListEl","formContainerEl","searchEl","notificationEl","modalEl","modalContainerEl","modalCloseBtnEl","backdropEl","KEY","selectedMovie","fetchTrendingMovies","response","fetch","trendingMovies","json","localStorage","setItem","JSON","stringify","fetchGenres","getItem","genres","receiveGenres","genresId","parse","genresArray","map","genre","includes","id","push","name","length","splice","join","receiveOneMovieGenres","genreName","fetchMovies","movieName","pageCounter","movies","fetchOneMovie","homeHeaderMarkup","classList","remove","add","libraryHeaderMarkup","createMarkup","markup","results","result","addPoster","poster_path","original_title","genre_ids","release_date","slice","innerHTML","posterWay","img","createModalMarkup","oneMovie","modalMarkup","title","vote_average","vote_count","popularity","overview","addToWatchedMowies","getMovies","movie","localStorageItems","error","console","log","addToLocalstorige","searchValue","getTrendingMovies","then","catch","notificationError","onSearchMovies","e","preventDefault","currentTarget","elements","searchQuery","value","trim","textContent","setTimeout","onClickMovieCard","target","nodeName","addToWatched","addToQueue","addEventListener","onClickAddToWatchedBtn","onClickAddToQueueBtn","onModalClose","onBackdropClose","getSavedMovies"],"mappings":"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","file":"src.c6641853.js","sourceRoot":"../src","sourcesContent":["export const refs = {\n  moviesListEl: document.querySelector('.movies-list'),\n  homePageEl: document.querySelector('.home-page-js'),\n  libraryPageEl: document.querySelector('.library-page-js'),\n  headerEl: document.querySelector('.header'),\n  libraryButtonsListEl: document.querySelector('.library-buttons-list'),\n  formContainerEl: document.querySelector('.form-container'),\n  searchEl: document.querySelector('.search-form'),\n  notificationEl: document.querySelector('.search-failure-text'),\n  modalEl: document.querySelector('.backdrop'),\n  modalContainerEl: document.querySelector('.modal_movie-container'),\n  modalCloseBtnEl: document.querySelector('.modal-close-btn'),\n  backdropEl: document.querySelector('.backdrop'),\n};\nconst KEY = '4a38965c8274ee66c1019c21406c4653';\nexport let selectedMovie = '';\n\nexport async function fetchTrendingMovies() {\n  const response = await fetch(`https://api.themoviedb.org/3/trending/movie/day?api_key=${KEY}`);\n  const trendingMovies = await response.json();\n  localStorage.setItem('movies', JSON.stringify(trendingMovies));\n  return trendingMovies;\n}\n\nexport async function fetchGenres() {\n  if (!localStorage.getItem('genres')) {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/genre/movie/list?api_key=${KEY}&language=en-US`,\n    );\n    const { genres } = await response.json();\n    localStorage.setItem('genres', JSON.stringify(genres));\n  } else {\n    return;\n  }\n}\nexport function receiveGenres(genresId) {\n  const genres = JSON.parse(localStorage.getItem('genres'));\n  const genresArray = [];\n  genres.map(genre => {\n    if (genresId.includes(genre.id)) {\n      genresArray.push(genre.name);\n    }\n  });\n\n  if (genresArray.length > 2) {\n    genresArray.splice(2);\n    genresArray.push('Other');\n  }\n\n  return genresArray.join(', ');\n}\n\nexport function receiveOneMovieGenres(genres) {\n  const genreName = [];\n  genres.map(genre => {\n    genreName.push(genre.name);\n  });\n  return genreName.join(', ');\n}\n\nexport async function fetchMovies(movieName, pageCounter) {\n  const response = await fetch(\n    `https://api.themoviedb.org/3/search/movie?api_key=${KEY}&query=${movieName}&language=en-US&page=${pageCounter}&include_adult=false`,\n  );\n  const movies = await response.json();\n  localStorage.setItem('movies', JSON.stringify(movies));\n  return movies;\n}\n\nexport async function fetchOneMovie(movieName) {\n  const response = await fetch(\n    `https://api.themoviedb.org/3/movie/${movieName}?api_key=${KEY}&language=en-US`,\n  );\n  selectedMovie = await response.json();\n  return selectedMovie;\n}\n","import { refs, receiveGenres, receiveOneMovieGenres } from './fetchMovies';\nimport img from './images/no-poster-available.jpg';\n\nexport function homeHeaderMarkup() {\n  refs.libraryPageEl.classList.remove('current-page');\n  refs.homePageEl.classList.add('current-page');\n  refs.headerEl.classList.remove('header-bg-library-page');\n  refs.headerEl.classList.add('header-bg-home-page');\n  refs.libraryButtonsListEl.classList.add('header-central-container-toggle');\n  refs.formContainerEl.classList.remove('header-central-container-toggle');\n}\n\nexport function libraryHeaderMarkup() {\n  refs.homePageEl.classList.remove('current-page');\n  refs.libraryPageEl.classList.add('current-page');\n  refs.headerEl.classList.remove('header-bg-home-page');\n  refs.headerEl.classList.add('header-bg-library-page');\n  refs.formContainerEl.classList.add('header-central-container-toggle');\n  refs.libraryButtonsListEl.classList.remove('header-central-container-toggle');\n}\nexport function createMarkup(movies) {\n  const markup = movies.results\n    .map(result => {\n      return `<li class=\"movie-card\" id=${result.id}>\n     <img src=${addPoster(result.poster_path)} alt=${\n        result.original_title\n      }poster\" loading=\"lazy\" class=\"image\" id=${result.id} />\n     \n       <p class=\"movie-name\" id=${result.id}>\n         ${result.original_title}\n       </p>\n       <p class=\"movie-genre\" id=${result.id}>\n       ${receiveGenres(result.genre_ids)} | ${result.release_date.slice(0, 4)}\n     </p>\n     \n   </li>`;\n    })\n    .join('');\n\n  refs.moviesListEl.innerHTML = markup;\n}\nfunction addPoster(posterWay) {\n  if (posterWay) {\n    return `https://image.tmdb.org/t/p/w300${posterWay}`;\n  }\n  return `${img}`;\n}\n\nexport function createModalMarkup(oneMovie) {\n  const modalMarkup = `\n  <img class=\"modal-poster\" src=${addPoster(oneMovie.poster_path)} alt=${oneMovie.original_title} />\n  <div class=\"modal-text-container\">\n  <p class=\"modal-name\">${oneMovie.title}</p>\n  <ul class=\"modal-list list\">\n    <li class=\"modal-item\">\n      <p class=\"modal-info-name\">Vote / Votes </p> \n       <p class=\"modal-value-rating\">${oneMovie.vote_average}<p/><p class=\"modal-info-value\">\n      / ${oneMovie.vote_count}</p>\n    </li>\n    <li class=\"modal-item\">\n      <p class=\"modal-info-name\">Popularity </p> <p class=\"modal-info-value\">${\n        oneMovie.popularity\n      }</p>\n    </li>\n    <li class=\"modal-item\">\n      <p class=\"modal-info-name\">Original Title </p><p class=\"modal-info-value\">${\n        oneMovie.original_title\n      }</p>\n    </li>\n    <li class=\"modal-item\">\n      <p class=\"modal-info-name\">Genre </p> <p class=\"modal-info-value\">${receiveOneMovieGenres(\n        oneMovie.genres,\n      )}</p>\n    </li>\n  </ul>\n  <p class=\"modal-about\">About</p>\n  <p class=\"modal-description\">${oneMovie.overview}</p>\n  <div class=\"modal_buttns-container\">\n          <button type=\"button\" class=\"modal-btn add-to-watched\">Add to watched</button>\n          <button type=\"button\" class=\"modal-btn add-to-queue\">Add to queue</button>\n        </div>\n  <div/>`;\n  refs.modalContainerEl.innerHTML = modalMarkup;\n}\n","import { selectedMovie } from './fetchMovies';\nlet addToWatchedMowies = [];\n\nfunction getMovies(movie) {\n  try {\n    const localStorageItems = JSON.parse(localStorage.getItem(movie));\n    if (localStorageItems) {\n      return localStorageItems;\n    } else {\n      return [];\n    }\n  } catch (error) {\n    console.log(error);\n    return [];\n  }\n}\nexport function addToLocalstorige(movie) {\n  addToWatchedMowies = getMovies(movie);\n  addToWatchedMowies.push(selectedMovie);\n  localStorage.setItem(movie, JSON.stringify(addToWatchedMowies));\n}\n\n// function findMovieInLocalStorige() {\n//   if (addToMowies.find(movie => selectedMovie.id === movie.id)) {\n//     return true;\n//   } else {\n//     return false;\n//   }\n// }\n\n// export function updateWatchedBtn(btn) {\n//   if (!findMovieInLocalStorige()) {\n//     console.log('false');\n//     return;\n//   } else {\n//     btn.classList.add('is-active');\n//     btn.textContent = 'remove from queue';\n//     console.log('true');\n//   }\n// }\n","import './css/styles.css';\nimport {\n  refs,\n  fetchTrendingMovies,\n  fetchGenres,\n  fetchMovies,\n  fetchOneMovie,\n  selectedMovie,\n} from './fetchMovies';\nimport {\n  createMarkup,\n  homeHeaderMarkup,\n  libraryHeaderMarkup,\n  createModalMarkup,\n} from './markup.js';\nimport { addToLocalstorige, updateWatchedBtn } from './localStorige';\nlet pageCounter = 1;\nlet searchValue = '';\n\n// ////////////////////////// start page //////////////////////////////\nfunction getTrendingMovies() {\n  homeHeaderMarkup();\n  fetchTrendingMovies()\n    .then(trendingMovies => createMarkup(trendingMovies))\n    .catch(error => {\n      notificationError();\n      console.log(error);\n    });\n  fetchGenres();\n}\ngetTrendingMovies();\n\n//////////////////////// search movies ///////////////////////////////\nrefs.searchEl.addEventListener('submit', onSearchMovies);\n\nfunction onSearchMovies(e) {\n  e.preventDefault();\n\n  searchValue = e.currentTarget.elements.searchQuery.value.trim();\n\n  fetchMovies(searchValue, pageCounter)\n    .then(movies => {\n      if (movies.results.length !== 0) {\n        createMarkup(movies);\n      } else {\n        notificationError();\n      }\n    })\n    .catch(error => {\n      notificationError();\n      console.log(error);\n    });\n  pageCounter += 1;\n}\n\nfunction notificationError() {\n  refs.notificationEl.textContent = 'Search result not successful. Enter the correct movie name';\n  setTimeout(() => {\n    refs.notificationEl.textContent = '';\n  }, 2000);\n}\n\n// //////////////////////// open modal window ////////////////////////\nrefs.moviesListEl.addEventListener('click', onClickMovieCard);\nfunction onClickMovieCard(e) {\n  const openModal =\n    e.target.nodeName === 'IMG' || e.target.nodeName === 'LI' || e.target.nodeName === 'P';\n\n  if (!openModal) {\n    return;\n  } else {\n    fetchOneMovie(e.target.id)\n      .then(oneMovie => {\n        createModalMarkup(oneMovie);\n        addToWatched();\n        addToQueue();\n        refs.modalEl.classList.remove('is-hidden');\n      })\n      .catch(error => console.log(error));\n  }\n}\n\n// ///////////////////////// add to watched ////////////////////////\nfunction addToWatched() {\n  const addToWatchedBtn = document.querySelector('.add-to-watched');\n  addToWatchedBtn.addEventListener('click', onClickAddToWatchedBtn);\n}\nfunction onClickAddToWatchedBtn() {\n  addToLocalstorige('addToWatchedMovie');\n}\n\n// /////////////////////// add to queue ///////////////////////////////\nfunction addToQueue() {\n  const addToQueueBtn = document.querySelector('.add-to-queue');\n  addToQueueBtn.addEventListener('click', onClickAddToQueueBtn);\n}\nfunction onClickAddToQueueBtn() {\n  addToLocalstorige('addToQueueMovie');\n}\n\n// ////////////////////////// close modal window /////////////////////\nrefs.modalCloseBtnEl.addEventListener('click', onModalClose);\nfunction onModalClose() {\n  refs.modalEl.classList.add('is-hidden');\n  refs.modalContainerEl.innerHTML = '';\n}\nrefs.backdropEl.addEventListener('click', onBackdropClose);\nfunction onBackdropClose(e) {\n  if (e.currentTarget === e.target) {\n    onModalClose();\n  }\n}\n\n// //////////////////////// home page ////////////////////\nrefs.homePageEl.addEventListener('click', getTrendingMovies);\n\n//////////////////////// library page /////////////////////\nrefs.libraryPageEl.addEventListener('click', getSavedMovies);\nfunction getSavedMovies() {\n  libraryHeaderMarkup();\n}\n"]}