{"version":3,"sources":["fetchMovies.js","markup.js","index.js"],"names":["refs","moviesListEl","document","querySelector","homePageEl","libraryPageEl","searchEl","notificationEl","KEY","fetchTrendingMovies","response","fetch","trendingMovies","json","localStorage","setItem","JSON","stringify","fetchGenres","getItem","genres","receiveGenres","genresId","parse","genresArray","map","genre","includes","id","push","name","length","splice","join","fetchMovies","movieName","pageCounter","movies","createMarkup","markup","results","result","addPoster","poster_path","original_title","genre_ids","release_date","slice","innerHTML","posterWay","img","searchValue","getTrendingMovies","then","error","console","log","onSearchMovies","e","preventDefault","currentTarget","elements","searchQuery","value","trim","catch","notificationError","textContent","setTimeout","addEventListener"],"mappings":";;;AAkDC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,oBAAA,EAAA,QAAA,YAAA,EAAA,QAAA,cAAA,EAAA,QAAA,YAAA,EAAA,QAAA,UAAA,EAlDM,MAAMA,EAAO,CAClBC,aAAcC,SAASC,cAAc,gBACrCC,WAAYF,SAASC,cAAc,eACnCE,cAAeH,SAASC,cAAc,kBACtCG,SAAUJ,SAASC,cAAc,gBACjCI,eAAgBL,SAASC,cAAc,yBA6CxC,QAAA,KAAA,EA3CD,MAAMK,EAAM,mCAEL,eAAeC,IACdC,MAAAA,QAAiBC,iEAAiEH,KAClFI,QAAuBF,EAASG,OAE/BD,OADPE,aAAaC,QAAQ,SAAUC,KAAKC,UAAUL,IACvCA,EAGF,eAAeM,IAChB,IAACJ,aAAaK,QAAQ,UAAW,CAC7BT,MAAAA,QAAiBC,+DACoCH,qBAErD,OAAEY,SAAiBV,EAASG,OAClCC,aAAaC,QAAQ,SAAUC,KAAKC,UAAUG,KAK3C,SAASC,EAAcC,GACtBF,MAAAA,EAASJ,KAAKO,MAAMT,aAAaK,QAAQ,WACzCK,EAAc,GAYbA,OAXPJ,EAAOK,IAAIC,IACLJ,EAASK,SAASD,EAAME,KAC1BJ,EAAYK,KAAKH,EAAMI,QAIvBN,EAAYO,OAAS,IACvBP,EAAYQ,OAAO,GACnBR,EAAYK,KAAK,UAGZL,EAAYS,KAAK,MAEnB,eAAeC,EAAYC,EAAWC,GACrC1B,MAAAA,QAAiBC,2DACgCH,WAAa2B,yBAAiCC,yBAE/FC,QAAe3B,EAASG,OAEvBwB,OADPvB,aAAaC,QAAQ,SAAUC,KAAKC,UAAUoB,IACvCA;;;;ACpBR,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,EA7BD,IAAA,EAAA,QAAA,iBACA,EAAA,EAAA,QAAA,qCA4BC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GA1Bc,SAASC,EAAaD,GAC7BE,MAAAA,EAASF,EAAOG,QACnBf,IAAIgB,6CAEOC,EAAUD,EAAOE,qBACzBF,EAAOG,wGAIJH,EAAOG,wEAGT,EAAcH,EAAAA,eAAAA,EAAOI,gBAAgBJ,EAAOK,aAAaC,MAAM,EAAG,kCAKtEd,KAAK,IAEHhC,EAAAA,KAAAA,aAAa+C,UAAYT,EAEhC,SAASG,EAAUO,GACbA,OAAAA,oCACuCA,OAEjCC,EAAI;;ACUf,aAtCD,QAAA,oBACA,IAAA,EAAA,QAAA,iBACA,EAAA,EAAA,QAAA,gBAoCC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAnCD,IAAId,EAAc,EACde,EAAc,GAClB,SAASC,IACH,KACoBC,EAAAA,EAAAA,uBAAAA,KAAKzC,KACZA,EAAAA,EAAAA,SAAAA,MAEf,EAAA,EAAA,eACA,MAAO0C,GACPC,QAAQC,IAAIF,IAQhB,SAASG,EAAeC,GACtBA,EAAEC,iBAEFR,EAAcO,EAAEE,cAAcC,SAASC,YAAYC,MAAMC,QAE7Cb,EAAAA,EAAAA,aAAAA,EAAaf,GACtBiB,KAAKhB,IAAU,EAAaA,EAAAA,SAAAA,IAC5B4B,MAAMX,IACLY,IACAX,QAAQC,IAAIF,KAEhBlB,GAAe,EAEjB,SAAS8B,IACF3D,EAAAA,KAAAA,eAAe4D,YAAc,6DAClCC,WAAW,KACJ7D,EAAAA,KAAAA,eAAe4D,YAAc,IACjC,KAtBLf,IACApD,EAAKI,KAAAA,WAAWiE,iBAAiB,QAASjB,GAE1CpD,EAAKM,KAAAA,SAAS+D,iBAAiB,SAAUZ","file":"src.12cba34c.js","sourceRoot":"../src","sourcesContent":["export const refs = {\n  moviesListEl: document.querySelector('.movies-list'),\n  homePageEl: document.querySelector('.home-page '),\n  libraryPageEl: document.querySelector('.library-page '),\n  searchEl: document.querySelector('.search-form'),\n  notificationEl: document.querySelector('.search-failure-text'),\n};\nconst KEY = '4a38965c8274ee66c1019c21406c4653';\n\nexport async function fetchTrendingMovies() {\n  const response = await fetch(`https://api.themoviedb.org/3/trending/movie/day?api_key=${KEY}`);\n  const trendingMovies = await response.json();\n  localStorage.setItem('movies', JSON.stringify(trendingMovies));\n  return trendingMovies;\n}\n\nexport async function fetchGenres() {\n  if (!localStorage.getItem('genres')) {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/genre/movie/list?api_key=${KEY}&language=en-US`,\n    );\n    const { genres } = await response.json();\n    localStorage.setItem('genres', JSON.stringify(genres));\n  } else {\n    return;\n  }\n}\nexport function receiveGenres(genresId) {\n  const genres = JSON.parse(localStorage.getItem('genres'));\n  const genresArray = [];\n  genres.map(genre => {\n    if (genresId.includes(genre.id)) {\n      genresArray.push(genre.name);\n    }\n  });\n\n  if (genresArray.length > 2) {\n    genresArray.splice(2);\n    genresArray.push('Other');\n  }\n\n  return genresArray.join(', ');\n}\nexport async function fetchMovies(movieName, pageCounter) {\n  const response = await fetch(\n    `https://api.themoviedb.org/3/search/movie?api_key=${KEY}&query=${movieName}&language=en-US&page=${pageCounter}&include_adult=false`,\n  );\n  const movies = await response.json();\n  localStorage.setItem('movies', JSON.stringify(movies));\n  return movies;\n}\n","import { refs, receiveGenres } from './fetchMovies';\nimport img from './images/no-poster-available.jpg';\n\nexport default function createMarkup(movies) {\n  const markup = movies.results\n    .map(result => {\n      return `<li class=\"movie-card\">\n     <img src=${addPoster(result.poster_path)} alt=\"${\n        result.original_title\n      }poster\" loading=\"lazy\" class=\"image\"/>\n     \n       <p class=\"movie-name\">\n         ${result.original_title}\n       </p>\n       <p class=\"movie-genre\">\n       ${receiveGenres(result.genre_ids)} | ${result.release_date.slice(0, 4)}\n     </p>\n     \n   </li>`;\n    })\n    .join('');\n\n  refs.moviesListEl.innerHTML = markup;\n}\nfunction addPoster(posterWay) {\n  if (posterWay) {\n    return `https://image.tmdb.org/t/p/w300${posterWay}`;\n  }\n  return `${img}`;\n}\n","import './css/styles.css';\nimport { refs, fetchTrendingMovies, fetchGenres, fetchMovies } from './fetchMovies';\nimport createMarkup from './markup.js';\nlet pageCounter = 1;\nlet searchValue = '';\nfunction getTrendingMovies() {\n  try {\n    fetchTrendingMovies().then(trendingMovies => {\n      createMarkup(trendingMovies);\n    });\n    fetchGenres();\n  } catch (error) {\n    console.log(error);\n  }\n}\ngetTrendingMovies();\nrefs.homePageEl.addEventListener('click', getTrendingMovies);\n\nrefs.searchEl.addEventListener('submit', onSearchMovies);\n\nfunction onSearchMovies(e) {\n  e.preventDefault();\n\n  searchValue = e.currentTarget.elements.searchQuery.value.trim();\n\n  fetchMovies(searchValue, pageCounter)\n    .then(movies => createMarkup(movies))\n    .catch(error => {\n      notificationError();\n      console.log(error);\n    });\n  pageCounter += 1;\n}\nfunction notificationError() {\n  refs.notificationEl.textContent = 'Search result not successful. Enter the correct movie name';\n  setTimeout(() => {\n    refs.notificationEl.textContent = '';\n  }, 2000);\n}\n"]}